name: Pre-Release on Main Merge

on:
  push:
    branches: [ main ]

concurrency:
  group: prerelease-main
  cancel-in-progress: false

jobs:
  create_pre_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    env:
      DEFAULT_START_VERSION: v0.1.0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find last merged PR (for metadata)
        id: lastpr
        uses: actions-ecosystem/action-get-merged-pull-request@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute next semantic version & notes
        id: calc
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --quiet
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          base_version=${latest_tag:-$DEFAULT_START_VERSION}
          if [ -z "$latest_tag" ]; then
            commit_range=$(git rev-list --reverse --max-count=200 HEAD)
          else
            commit_range=$(git rev-list ${latest_tag}..HEAD)
          fi
          [ -z "$commit_range" ] && commit_range=$(git rev-list -n1 HEAD)

          bump=patch
          feats=(); fixes=(); docs=(); chores=(); refactors=(); perf=(); tests=(); others=(); breaks=()
          while read -r sha; do
            s=$(git log -n1 --pretty=format:%s $sha)
            b=$(git log -n1 --pretty=format:%b $sha)
            low=$(echo "$s" | tr 'A-Z' 'a-z')
            t=${low%%!*}; t=${t%%:*}
            line="- $s (${sha:0:7})"
            case "$t" in
              feat) feats+=("$line"); [ "$bump" = patch ] && bump=minor ;;
              fix) fixes+=("$line") ;;
              docs) docs+=("$line") ;;
              chore) chores+=("$line") ;;
              refactor) refactors+=("$line") ;;
              perf) perf+=("$line") ;;
              test) tests+=("$line") ;;
              *) others+=("$line") ;;
            esac
            if grep -qi 'breaking change' <<<"$b" || [[ "$s" == *"!"* ]]; then
              breaks+=("$line"); bump=major
            fi
          done <<<"$commit_range"

          inc() { local v=${1#v}; IFS=. read -r MA MI PA <<<"$v"; MA=${MA:-0}; MI=${MI:-0}; PA=${PA:-0}; case $2 in major) MA=$((MA+1)); MI=0; PA=0;; minor) MI=$((MI+1)); PA=0;; *) PA=$((PA+1));; esac; echo v${MA}.${MI}.${PA}; }
          next_tag=$(inc "$base_version" "$bump")
          if git rev-parse "$next_tag" >/dev/null 2>&1; then next_tag="${next_tag}-$(date +%Y%m%d%H%M%S)"; fi

          compare_link=""; [ -n "$latest_tag" ] && compare_link="https://github.com/${GITHUB_REPOSITORY}/compare/${latest_tag}...${next_tag}" || compare_link="https://github.com/${GITHUB_REPOSITORY}/commits/${next_tag}"

          section() { local title=$1; shift; [ "$#" -eq 0 ] && return; echo "### $title"; printf '%s\n' "$@"; echo; }

          {
            echo "# Pre-release $next_tag"
            echo
            echo "Bump type: $bump"
            echo "Commit range: ${latest_tag:-initial}..HEAD"
            echo
            [ ${#breaks[@]} -gt 0 ] && { echo "## BREAKING CHANGES"; printf '%s\n' "${breaks[@]}"; echo; }
            section "Features" "${feats[@]}"
            section "Fixes" "${fixes[@]}"
            section "Docs" "${docs[@]}"
            section "Chore" "${chores[@]}"
            section "Refactor" "${refactors[@]}"
            section "Performance" "${perf[@]}"
            section "Tests" "${tests[@]}"
            section "Other" "${others[@]}"
            echo "---"
            echo "Last PR: #${{ steps.lastpr.outputs.number }} - ${{ steps.lastpr.outputs.title }}"
            echo "Merged by: ${{ steps.lastpr.outputs.mergedBy }}"
            echo "Author: ${{ steps.lastpr.outputs.author }}"
            echo "Compare: $compare_link"
          } > release_body.md

          cp release_body.md CHANGELOG_FRAGMENT.md
          jq -n --arg tag "$next_tag" --arg bump "$bump" --arg prev "$latest_tag" --arg compare "$compare_link" '{tag:$tag,bump:$bump,previous_tag:$prev,compare:$compare}' > release-metadata.json || echo '{"tag":"'$next_tag'"}' > release-metadata.json

          echo "tag=$next_tag" >> $GITHUB_OUTPUT
          echo "body_path=release_body.md" >> $GITHUB_OUTPUT
          echo "changelog=CHANGELOG_FRAGMENT.md" >> $GITHUB_OUTPUT
          echo "metadata=release-metadata.json" >> $GITHUB_OUTPUT

      - name: Create pre-release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.calc.outputs.tag }}
          name: Pre-release ${{ steps.calc.outputs.tag }}
          body_path: ${{ steps.calc.outputs.body_path }}
          draft: false
          prerelease: true
          files: |
            ${{ steps.calc.outputs.changelog }}
            ${{ steps.calc.outputs.metadata }}

      - name: Summary
        run: |
          echo "Release tag: ${{ steps.calc.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "Semantic bump computed." >> $GITHUB_STEP_SUMMARY
          echo "Assets: CHANGELOG_FRAGMENT.md, release-metadata.json" >> $GITHUB_STEP_SUMMARY
